# -*- coding: utf-8 -*-
"""show_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e2OYFADG1Imme6RdSFEZU0GQ0JngHqyq
"""

import matplotlib.pyplot as plt
import numpy as np
import torch
import torchvision


# functions to show an image
def imshow_images(img,c ):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    fig = plt.figure(figsize=(7,7))
    plt.imshow(np.transpose(npimg, (1, 2, 0)),interpolation='none')
    plt.title(c)



def show_train_data(dataset, classes):

	# get some random training images

  dataiter = iter(dataset)
  images, labels = dataiter.next()
  for i in range(10):
    index = [j for j in range(len(labels)) if labels[j] == i]
    imshow(torchvision.utils.make_grid(images[index[0:5]],nrow=5,padding=2,scale_each=True),classes[i])


# ------------For Mask and Depth -----------------------------------------------


import matplotlib.pyplot as plt
import numpy as np
import torch
import torchvision
import time


# functions to show an image
def imshow(img,c, gray = False ):
  fig = plt.figure(figsize=(40,40))
 
  if(gray):
      img = img*255
      npimg = img.numpy()
      
      plt.imshow(npimg[0],interpolation='none', cmap = "gray")
      
  else : 
      img = img * 0.2 + 0.6     # unnormalize
      npimg = img.numpy()
  
      plt.imshow(np.transpose(npimg, (1, 2, 0)),interpolation='none')
  plt.axis("off")

  plt.title(c,fontweight="bold",fontsize=35)



def show_sample_data(dataset):

	# get some random training images
  start = time.time()
  dataiter = iter(dataset)
  images, mask,depth = dataiter.next()  
  bg = [images[i][:3] for i in range(10) ]
  fg_bg = [images[i][3:] for i in range(10)   ]
  m = torch.unsqueeze(mask, 1)
  d = torch.unsqueeze(depth, 1)
  masks = [m[i] for i in range(10) ]
  depths = [d[i] for i in range(10) ]
  imshow(torchvision.utils.make_grid(bg,nrow=10,padding=1,scale_each=True), "bg")
  imshow(torchvision.utils.make_grid(fg_bg,nrow=10,padding=1,scale_each=True), "fg_bg")
  imshow(torchvision.utils.make_grid(masks,nrow=10,padding=1,scale_each=True), "mask", gray = True)
  imshow(torchvision.utils.make_grid(depths,nrow=10,padding=1,scale_each=True), "depth", gray = True)
  end = time.time()
  print(f"sample train images took {round((end - start),3)}s to dispay")